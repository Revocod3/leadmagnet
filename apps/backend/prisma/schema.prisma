generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        String   @id @default(cuid())
  email     String   @unique
  name      String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  sessions   Session[]
  diagnoses  Diagnosis[]

  @@map("users")
}

model Session {
  id                   String    @id @default(cuid())
  userId               String?
  userName             String?
  userEmail            String?
  language             String    @default("es")
  diagnosticType       String?   // "chat" | "quiz"
  step                 String    @default("initial")
  currentQuestionIndex Int       @default(0)
  imageAnalysisText    String?
  assistantId          String?
  threadId             String?
  flowState            Json?     // Store diagnostic flow state as JSON
  startTime            DateTime  @default(now())
  completionTime       DateTime?
  expiresAt            DateTime

  // Engagement tracking fields
  diagnosticMode       String?   // "express" | "standard" | "deep"
  engagementScore      Float?    // 0-100
  questionsAsked       Int       @default(0)
  avgResponseLength    Float?    // Average words per response
  timeSpent            Int?      // Total time in milliseconds
  completedDiagnosis   Boolean   @default(false)
  convertedToChat      Boolean   @default(false)
  engagementSignals    Json?     // EngagementSignals object
  wordpressLeadId      String?   // WordPress lead ID

  user              User?          @relation(fields: [userId], references: [id])
  messages          Message[]
  quizAnswers       QuizAnswer[]
  diagnosis         Diagnosis?
  discountCodes     DiscountCode[]

  @@index([userId])
  @@index([expiresAt])
  @@map("sessions")
}

model Message {
  id        String   @id @default(cuid())
  sessionId String
  role      String   // "user" | "assistant"
  content   String   @db.Text
  metadata  Json?
  createdAt DateTime @default(now())

  session   Session  @relation(fields: [sessionId], references: [id], onDelete: Cascade)

  @@index([sessionId])
  @@map("messages")
}

model QuizAnswer {
  id         String   @id @default(cuid())
  sessionId  String
  questionId Int
  answer     String
  points     Int
  createdAt  DateTime @default(now())

  session    Session  @relation(fields: [sessionId], references: [id], onDelete: Cascade)

  @@index([sessionId])
  @@map("quiz_answers")
}

model Diagnosis {
  id               String   @id @default(cuid())
  sessionId        String   @unique
  userId           String?
  content          String   @db.Text
  totalScore       Int?
  scorePercentage  Float?
  pdfGenerated     Boolean  @default(false)
  createdAt        DateTime @default(now())

  // Engagement tracking
  diagnosticMode   String?  // Mode used for diagnosis
  questionsAsked   Int?     // Number of questions asked
  engagementScore  Float?   // Final engagement score

  session          Session  @relation(fields: [sessionId], references: [id], onDelete: Cascade)
  user             User?    @relation(fields: [userId], references: [id])

  @@index([userId])
  @@map("diagnoses")
}

model DiscountCode {
  id         String    @id @default(cuid())
  code       String    @unique
  sessionId  String
  percentage Int       // Discount percentage (e.g., 30 for 30%)
  expiresAt  DateTime
  used       Boolean   @default(false)
  usedAt     DateTime?
  createdAt  DateTime  @default(now())

  session    Session   @relation(fields: [sessionId], references: [id], onDelete: Cascade)

  @@index([sessionId])
  @@index([code])
  @@map("discount_codes")
}